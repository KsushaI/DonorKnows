import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # Log to a file
        logging.StreamHandler()  # Log to the console
    ]
)
logger = logging.getLogger(__name__)

# Load manager group chat ID from environment variable
MANAGER_GROUP_CHAT_ID = int(os.getenv("MANAGER_GROUP_CHAT_ID", 0))  # Replace with your manager group ID

# List of questions by category
QUESTIONS = {
    "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã": [
        "–ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è —Å –ø–ª–∞–∑–º–æ–π?",
        "–ù—É–∂–Ω–æ –ª–∏ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?",
        "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É —Å—Ç–∞—Ç—É—Å –ø–æ—á—ë—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞?"
    ],
    "–í—Ç–æ—Ä–æ–µ": ["1?", "2?", "3?", "4?", "5?", "6?"],
    "–î—Ä—É–≥–æ–µ": [
        "–ö—É–¥–∞ —è –ø–æ–ø–∞–ª?"
    ]
}

# Answers to questions
REPLIES = {
    "–ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è —Å –ø–ª–∞–∑–º–æ–π?": "–ï—ë –ø—Ä–æ–≤–µ—Ä—è—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "–ù—É–∂–Ω–æ –ª–∏ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?": "–î–∞, –ø—Ä–∏—Ö–æ–¥–∏, –º—ã —Ç–µ–±—è –∂–¥—ë–º ;)",
    "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É —Å—Ç–∞—Ç—É—Å –ø–æ—á—ë—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞?": "–û—á–µ–Ω—å –Ω–µ—Å–∫–æ—Ä–æ",
    "1?": "1.",
    "2?": "2.",
    "3?": "3.",
    "4?": "4.",
    "5?": "5.",
    "6?": "6.",
    "–ö—É–¥–∞ —è –ø–æ–ø–∞–ª?": "–°—é–¥–∞",
}

# Styled "Back" button
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# Dictionary to store the relationship between user and forwarded messages
user_manager_messages = {}

# Command /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.username} started the bot.")
    # Create keyboard layout
    keyboard = [
        *[[category] for category in QUESTIONS.keys()],  # Question categories
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì –º–µ–Ω–µ–¥–∂–µ—Ä—É"]  # Button below categories
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ü©∏\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=reply_markup
    )

# Handle user messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_chat_id = update.message.chat_id
    user_message_id = update.message.message_id
    user_username = update.message.from_user.username

    # Log the received message
    logger.info(f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

    # Skip processing if the message is from the manager group and is a reply
    if update.message.chat.id == MANAGER_GROUP_CHAT_ID and update.message.reply_to_message:
        logger.info(f"[handle_message] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–≤–µ—Ç.")
        return

    if user_message == BACK_BUTTON:
        # Handle "Back" button
        keyboard = [
            *[[category] for category in QUESTIONS.keys()],  # Question categories
            ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì –º–µ–Ω–µ–¥–∂–µ—Ä—É"]  # Button below categories
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        logger.info(f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.")
    elif user_message == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        # Handle "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É" button
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ:")
        logger.info(
            f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É'.")
    elif user_message in QUESTIONS:
        # Show questions for the selected category
        keyboard = [[question] for question in QUESTIONS[user_message]] + [[BACK_BUTTON]]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{user_message}':", reply_markup=reply_markup)
        logger.info(f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {user_message}.")
    elif user_message in REPLIES:
        # Send the answer if the question is in the list
        await update.message.reply_text(REPLIES[user_message])
        logger.info(f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_message}. –û—Ç–≤–µ—Ç: {REPLIES[user_message]}")
    else:
        # Forward the message to the manager group
        if MANAGER_GROUP_CHAT_ID:
            try:
                # Forward the message
                forwarded_message = await context.bot.forward_message(
                    chat_id=MANAGER_GROUP_CHAT_ID,
                    from_chat_id=user_chat_id,
                    message_id=user_message_id
                )

                # Log the forwarded message
                logger.info(f"[handle_message] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username} (ID: {user_chat_id}) –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (ID: {MANAGER_GROUP_CHAT_ID}). ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {forwarded_message.message_id}.")

                # Store the relationship between the forwarded message and the user
                user_manager_messages[forwarded_message.message_id] = {
                    "user_chat_id": user_chat_id,
                    "user_username": user_username,
                    "user_message_id": user_message_id
                }

                # Log the stored relationship
                logger.info(f"[handle_message] –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {forwarded_message.message_id} -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}).")

                await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            except Exception as e:
                logger.error(f"[handle_message] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (ID: {MANAGER_GROUP_CHAT_ID}): {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logger.warning("[handle_message] ID –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Handle manager replies in the group
async def handle_manager_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Log the incoming message
    logger.info(f"[handle_manager_reply] –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username} (ID: {update.message.from_user.id}).")

    # Check if the message is from the managers' group
    if update.message.chat.id == MANAGER_GROUP_CHAT_ID:
        # Check if the message is a reply
        if update.message.reply_to_message:
            replied_message_id = update.message.reply_to_message.message_id

            # Log the replied message
            logger.info(f"[handle_manager_reply] –ú–µ–Ω–µ–¥–∂–µ—Ä @{update.message.from_user.username} (ID: {update.message.from_user.id}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {replied_message_id}.")

            # Check if the replied message is linked to a user
            if replied_message_id in user_manager_messages:
                user_data = user_manager_messages[replied_message_id]
                user_chat_id = user_data["user_chat_id"]
                user_username = user_data["user_username"]

                # Log the forwarding of the reply to the user
                logger.info(f"[handle_manager_reply] –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{update.message.from_user.username} (ID: {update.message.from_user.id}) –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_username} (ID: {user_chat_id}).")

                # Send the manager's reply to the user
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text=f"–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {update.message.text}"
                )

                # Log the deletion of the relationship
                logger.info(f"[handle_manager_reply] –ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {replied_message_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ user_manager_messages.")

                # Remove the relationship from the dictionary
                del user_manager_messages[replied_message_id]
            else:
                # Log if the relationship is not found
                logger.warning(f"[handle_manager_reply] –°–≤—è–∑—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {replied_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ user_manager_messages.")
        else:
            # Log if the message is not a reply
            logger.info(f"[handle_manager_reply] –ú–µ–Ω–µ–¥–∂–µ—Ä @{update.message.from_user.username} (ID: {update.message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        # Log if the message is not from the managers' group
        logger.info(f"[handle_manager_reply] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username} (ID: {update.message.from_user.id}) –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

# Main function
def main():
    # Load the bot token from environment variable
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("No BOT_TOKEN environment variable found!")

    # Create the Application
    app = Application.builder().token(TOKEN).build()

    # Register handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=MANAGER_GROUP_CHAT_ID) & filters.REPLY, handle_manager_reply))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the bot with webhook
    app.run_webhook(
        listen="0.0.0.0",  # Listen on all interfaces
        port=5000,  # Port to listen on
        url_path=TOKEN,  # Webhook path (use bot token for security)
        webhook_url=f"https://donorknows.onrender.com/{TOKEN}"  # Full webhook URL
    )

if __name__ == "__main__":
    main()