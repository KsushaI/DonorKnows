from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import os

# Read the bot token from an environment variable
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("No BOT_TOKEN environment variable found!")

# List of questions by category
QUESTIONS = {
    "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã": [
        "–ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è —Å –ø–ª–∞–∑–º–æ–π?",
        "–ù—É–∂–Ω–æ –ª–∏ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?",
        "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É —Å—Ç–∞—Ç—É—Å –ø–æ—á—ë—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞?"
    ],
    "–í—Ç–æ—Ä–æ–µ": ["1?", "2?", "3?", "4?", "5?", "6?"],
    "–î—Ä—É–≥–æ–µ": [
        "–ö—É–¥–∞ —è –ø–æ–ø–∞–ª?"
    ]
}

# Answers to questions
REPLIES = {
    "–ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è —Å –ø–ª–∞–∑–º–æ–π?": "–ï—ë –ø—Ä–æ–≤–µ—Ä—è—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "–ù—É–∂–Ω–æ –ª–∏ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?": "–î–∞, –ø—Ä–∏—Ö–æ–¥–∏, –º—ã —Ç–µ–±—è –∂–¥—ë–º ;)",
    "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É —Å—Ç–∞—Ç—É—Å –ø–æ—á—ë—Ç–Ω–æ–≥–æ –¥–æ–Ω–æ—Ä–∞?": "–û—á–µ–Ω—å –Ω–µ—Å–∫–æ—Ä–æ",
    "1?": "1.",
    "2?": "2.",
    "3?": "3.",
    "4?": "4.",
    "5?": "5.",
    "6?": "6.",
    "–ö—É–¥–∞ —è –ø–æ–ø–∞–ª?": "–°—é–¥–∞",
}

# Manager or group ID (can be obtained via @userinfobot)
MANAGER_CHAT_ID = 1120634377

# Styled "Back" button
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # Log to file
        logging.StreamHandler()  # Log to console
    ]
)
logger = logging.getLogger(__name__)

# Command /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.username} started the bot.")
    keyboard = [[category] for category in QUESTIONS.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ü©∏\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=reply_markup)

# Handle text messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    logger.info(f"User {update.message.from_user.username} sent: {user_message}")

    if user_message == BACK_BUTTON:
        # If "Back" button is pressed, return to category selection
        keyboard = [[category] for category in QUESTIONS.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    elif user_message in QUESTIONS:
        # If a category is selected, show questions from that category
        keyboard = [[question] for question in QUESTIONS[user_message]] + [[BACK_BUTTON]]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{user_message}':", reply_markup=reply_markup)
    elif user_message in REPLIES:
        # If the question is in the list, send the answer
        await update.message.reply_text(REPLIES[user_message])
    else:
        # If the question is not in the list, forward it to the manager
        await context.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username}:\n{user_message}"
        )
        await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# Main function
def main():
    app = Application.builder().token(TOKEN).build()

    # Register commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # Set webhook
    app.run_webhook(
        listen="0.0.0.0",  # Listen on all interfaces
        port=5000,  # Port to listen on
        url_path=TOKEN,  # Webhook path (use bot token for security)
        webhook_url=f"https://donorknows.onrender.com/{TOKEN}"  # Full webhook URL
    )

if __name__ == "__main__":
    main()